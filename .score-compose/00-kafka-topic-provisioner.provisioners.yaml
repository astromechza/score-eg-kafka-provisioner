- uri: template://custom-provisioners/kafka-topic
  type: kafka-topic
  state: |
    topic: {{ dig "topic" (print "topic-" (randAlphaNum 6)) .State | quote }}
  shared: |
    shared_kafka_instance_name: {{ dig "shared_kafka_instance_name" (print "kafka-" (randAlphaNum 6)) .Shared | quote }}
  services: |
    {{ .Shared.shared_kafka_instance_name }}:
      image: bitnami/kafka:latest
      restart: always
      environment:
        KAFKA_CFG_NODE_ID: "0"
        KAFKA_CFG_PROCESS_ROLES: controller,broker
        KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
        KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
        KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "0@{{ .Shared.shared_kafka_instance_name }}:9093"
        KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
        KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "false"
      healthcheck:
        test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server=localhost:9092"]
        interval: 2s
        timeout: 2s
        retries: 10
    {{ .State.topic }}-init:
      image: bitnami/kafka:latest
      entrypoint: ["/bin/sh"]
      command: ["-c", "kafka-topics.sh --topic={{.State.topic}} --bootstrap-server=localhost:9092 --describe || kafka-topics.sh --topic={{.State.topic}} --bootstrap-server=localhost:9092 --create"]
      network_mode: "service:{{ .Shared.shared_kafka_instance_name }}"
      labels:
        dev.score.compose.labels.is-init-container: "true"
      depends_on:
        {{ .Shared.shared_kafka_instance_name }}:
          condition: service_healthy
          restart: true
  outputs: |
    host: {{ .Shared.shared_kafka_instance_name }}
    port: "9092"
    name: {{ .State.topic }}
